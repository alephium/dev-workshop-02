Contract FriendTech(
    mut owner: Address,
    mut totalProtocolFee: U256,
    mut protocolFeePercent: U256,   // basis point
    mut subjectFeePercent: U256     // basis point
) {
    event OwnerUpdated(
        previous: Address,
        new: Address
    )

    enum ErrorCodes {
        OwnerAllowedOnly = 0
    }

    @using(updateFields = true)
    pub fn setProtocolFeePercent(feePercent: U256) -> () {
        checkCaller!(callerAddress!() == owner, ErrorCodes.OwnerAllowedOnly)
        protocolFeePercent = feePercent
    }

    @using(updateFields = true)
    pub fn setSubjectFeePercent(feePercent: U256) -> () {
        checkCaller!(callerAddress!() == owner, ErrorCodes.OwnerAllowedOnly)
        subjectFeePercent = feePercent
    }

    @using(updateFields = true)
    pub fn updateOwner(newOwner: Address) -> () {
        checkCaller!(callerAddress!() == owner, ErrorCodes.OwnerAllowedOnly)
        owner = newOwner
        emit OwnerUpdated(owner, newOwner)
    }

    @using(updateFields = true)
    pub fn withdrawProtocolFee(to: Address) -> () {
       checkCaller!(callerAddress!() == owner, ErrorCodes.OwnerAllowedOnly)
       totalProtocolFee = 0
       transferTokenFromSelf!(to, ALPH, totalProtocolFee)
    }

    pub fn getSupply(sharesSubject: Address) -> U256 {
        let subjectSharesContractId = subContractId!(toByteVec!(sharesSubject))
        return if (contractExists!(subjectSharesContractId)) SubjectShares(subjectSharesContractId).getSupply() else 0
    }

    pub fn getBalance(sharesSubject: Address, holder: Address) -> U256 {
        let subjectSharesContractId = subContractId!(toByteVec!(sharesSubject))
        return if (contractExists!(subjectSharesContractId)) SubjectShares(subjectSharesContractId).getBalance(holder) else 0
    }
}
