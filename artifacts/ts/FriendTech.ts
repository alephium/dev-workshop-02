/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as FriendTechContractJson } from "../FriendTech.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace FriendTechTypes {
  export type Fields = {
    owner: Address;
    totalProtocolFee: bigint;
    protocolFeePercent: bigint;
    subjectFeePercent: bigint;
  };

  export type State = ContractState<Fields>;

  export type OwnerUpdatedEvent = ContractEvent<{
    previous: Address;
    new: Address;
  }>;
}

class Factory extends ContractFactory<
  FriendTechInstance,
  FriendTechTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as FriendTechTypes.Fields;
  }

  eventIndex = { OwnerUpdated: 0 };
  consts = { ErrorCodes: { OwnerAllowedOnly: BigInt(0) } };

  at(address: string): FriendTechInstance {
    return new FriendTechInstance(address);
  }

  tests = {
    setProtocolFeePercent: async (
      params: TestContractParams<FriendTechTypes.Fields, { feePercent: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setProtocolFeePercent", params);
    },
    setSubjectFeePercent: async (
      params: TestContractParams<FriendTechTypes.Fields, { feePercent: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setSubjectFeePercent", params);
    },
    updateOwner: async (
      params: TestContractParams<FriendTechTypes.Fields, { newOwner: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateOwner", params);
    },
    withdrawProtocolFee: async (
      params: TestContractParams<FriendTechTypes.Fields, { to: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdrawProtocolFee", params);
    },
  };
}

// Use this object to test and deploy the contract
export const FriendTech = new Factory(
  Contract.fromJson(
    FriendTechContractJson,
    "",
    "e13be0e15e3fb38a35206abfd665509f4fcc55f6d41287d2fe8b203c6bcc38dd"
  )
);

// Use this class to interact with the blockchain
export class FriendTechInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<FriendTechTypes.State> {
    return fetchContractState(FriendTech, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeOwnerUpdatedEvent(
    options: EventSubscribeOptions<FriendTechTypes.OwnerUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      FriendTech.contract,
      this,
      options,
      "OwnerUpdated",
      fromCount
    );
  }
}
