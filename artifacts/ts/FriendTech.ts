/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as FriendTechContractJson } from "../FriendTech.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace FriendTechTypes {
  export type Fields = {
    owner: Address;
    totalProtocolFee: bigint;
    protocolFeePercent: bigint;
    subjectFeePercent: bigint;
  };

  export type State = ContractState<Fields>;

  export type OwnerUpdatedEvent = ContractEvent<{
    previous: Address;
    new: Address;
  }>;

  export interface CallMethodTable {
    getPrice: {
      params: CallContractParams<{ supply: bigint; amount: bigint }>;
      result: CallContractResult<bigint>;
    };
    getBuyPrice: {
      params: CallContractParams<{ sharesSubject: Address; amount: bigint }>;
      result: CallContractResult<bigint>;
    };
    getSellPrice: {
      params: CallContractParams<{ sharesSubject: Address; amount: bigint }>;
      result: CallContractResult<bigint>;
    };
    getSupply: {
      params: CallContractParams<{ sharesSubject: Address }>;
      result: CallContractResult<bigint>;
    };
    getBalance: {
      params: CallContractParams<{ sharesSubject: Address; holder: Address }>;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  FriendTechInstance,
  FriendTechTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as FriendTechTypes.Fields;
  }

  eventIndex = { OwnerUpdated: 0 };
  consts = { ErrorCodes: { OwnerAllowedOnly: BigInt(0) } };

  at(address: string): FriendTechInstance {
    return new FriendTechInstance(address);
  }

  tests = {
    setProtocolFeePercent: async (
      params: TestContractParams<FriendTechTypes.Fields, { feePercent: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setProtocolFeePercent", params);
    },
    setSubjectFeePercent: async (
      params: TestContractParams<FriendTechTypes.Fields, { feePercent: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setSubjectFeePercent", params);
    },
    getPrice: async (
      params: TestContractParams<
        FriendTechTypes.Fields,
        { supply: bigint; amount: bigint }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getPrice", params);
    },
    getBuyPrice: async (
      params: TestContractParams<
        FriendTechTypes.Fields,
        { sharesSubject: Address; amount: bigint }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getBuyPrice", params);
    },
    getSellPrice: async (
      params: TestContractParams<
        FriendTechTypes.Fields,
        { sharesSubject: Address; amount: bigint }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getSellPrice", params);
    },
    updateOwner: async (
      params: TestContractParams<FriendTechTypes.Fields, { newOwner: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateOwner", params);
    },
    withdrawProtocolFee: async (
      params: TestContractParams<FriendTechTypes.Fields, { to: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdrawProtocolFee", params);
    },
    getSupply: async (
      params: TestContractParams<
        FriendTechTypes.Fields,
        { sharesSubject: Address }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getSupply", params);
    },
    getBalance: async (
      params: TestContractParams<
        FriendTechTypes.Fields,
        { sharesSubject: Address; holder: Address }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getBalance", params);
    },
  };
}

// Use this object to test and deploy the contract
export const FriendTech = new Factory(
  Contract.fromJson(
    FriendTechContractJson,
    "",
    "537b2d1df753b3cd9d406677a0c3703b1bee63802f33eb0c9d145cd37e0d262a"
  )
);

// Use this class to interact with the blockchain
export class FriendTechInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<FriendTechTypes.State> {
    return fetchContractState(FriendTech, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeOwnerUpdatedEvent(
    options: EventSubscribeOptions<FriendTechTypes.OwnerUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      FriendTech.contract,
      this,
      options,
      "OwnerUpdated",
      fromCount
    );
  }

  methods = {
    getPrice: async (
      params: FriendTechTypes.CallMethodParams<"getPrice">
    ): Promise<FriendTechTypes.CallMethodResult<"getPrice">> => {
      return callMethod(
        FriendTech,
        this,
        "getPrice",
        params,
        getContractByCodeHash
      );
    },
    getBuyPrice: async (
      params: FriendTechTypes.CallMethodParams<"getBuyPrice">
    ): Promise<FriendTechTypes.CallMethodResult<"getBuyPrice">> => {
      return callMethod(
        FriendTech,
        this,
        "getBuyPrice",
        params,
        getContractByCodeHash
      );
    },
    getSellPrice: async (
      params: FriendTechTypes.CallMethodParams<"getSellPrice">
    ): Promise<FriendTechTypes.CallMethodResult<"getSellPrice">> => {
      return callMethod(
        FriendTech,
        this,
        "getSellPrice",
        params,
        getContractByCodeHash
      );
    },
    getSupply: async (
      params: FriendTechTypes.CallMethodParams<"getSupply">
    ): Promise<FriendTechTypes.CallMethodResult<"getSupply">> => {
      return callMethod(
        FriendTech,
        this,
        "getSupply",
        params,
        getContractByCodeHash
      );
    },
    getBalance: async (
      params: FriendTechTypes.CallMethodParams<"getBalance">
    ): Promise<FriendTechTypes.CallMethodResult<"getBalance">> => {
      return callMethod(
        FriendTech,
        this,
        "getBalance",
        params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends FriendTechTypes.MultiCallParams>(
    calls: Calls
  ): Promise<FriendTechTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      FriendTech,
      this,
      calls,
      getContractByCodeHash
    )) as FriendTechTypes.MultiCallResults<Calls>;
  }
}
